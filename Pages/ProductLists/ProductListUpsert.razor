@page "/product-list/create"
@using Core.Dtos
@using Infrastructure.Repository.IRepository
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">@Title New Product</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="ProductModel" OnValidSubmit="HandleProductListUpsert">
                        <DataAnnotationsValidator />
                        @*  <ValidationSummary class="text-danger mb-3" /> *@

                        <div class="form-group">
                            <label for="name">Name</label>
                            <InputText id="name" @bind-Value="ProductModel.Name" class="form-control" />
                            <ValidationMessage For="() => ProductModel.Name" class="text-danger" />
                        </div>

                        <div class="form-group">
                            <label for="description">Description</label>
                            <InputTextArea id="description" @bind-Value="ProductModel.Description" class="form-control" />
                            <ValidationMessage For="() => ProductModel.Description" class="text-danger" />
                        </div>

                        <div class="form-group">
                            <label for="price">Price</label>
                            <InputNumber id="price" @bind-Value="ProductModel.Price" class="form-control" />
                            <ValidationMessage For="() => ProductModel.Price" class="text-danger" />
                        </div>

                        <div class="form-group">
                            <label for="pictureUrl">Picture URL</label>
                            <InputText id="pictureUrl" @bind-Value="ProductModel.PictureUrl" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="productTypeId">Product Type ID</label>
                            <InputNumber id="productTypeId" @bind-Value="ProductModel.ProductTypeId" class="form-control" />
                            <ValidationMessage For="() => ProductModel.ProductTypeId" class="text-danger" />
                        </div>

                        <div class="form-group">
                            <label for="productBrandId">Product Brand ID</label>
                            <InputNumber id="productBrandId" @bind-Value="ProductModel.ProductBrandId" class="form-control" />
                            <ValidationMessage For="() => ProductModel.ProductBrandId" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-success mt-3">@Title New Product</button>
                        <NavLink href="/product-list" class="btn btn-secondary mt-3 ml-2">Back To Index</NavLink>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private ProductCreateDto ProductModel { get; set; } = new ProductCreateDto();
    private string Title { get; set; } = "Add";

    private async Task HandleProductListUpsert()
    {
        var productDetailsByName = await ProductRepository.IsNewProductDuplicate(ProductModel.Name);
        if (productDetailsByName != null)
        {
            // Show error message if product name is duplicate
            // You can implement an error message display here if needed
            return;
        }

        var productCreatedResult = await ProductRepository.CreateProduct(ProductModel);
        NavigationManager.NavigateTo("/product-list");
    }
}
